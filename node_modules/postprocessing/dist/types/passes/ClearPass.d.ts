import { Pass } from "../core/Pass.js";
import { ClearFlags } from "../utils/ClearFlags.js";
import { ClearValues } from "../utils/ClearValues.js";
/**
 * A clear pass.
 *
 * @category Passes
 */
export declare class ClearPass extends Pass {
    /**
     * The clear flags.
     */
    readonly clearFlags: ClearFlags;
    /**
     * The clear values.
     *
     * - If an override clear color is set, the scene background will be ignored.
     * - The override alpha setting has no effect when a scene background is used.
     */
    readonly clearValues: ClearValues;
    /**
     * G-Buffer texture indices.
     */
    private gBufferIndices;
    /**
     * A background object.
     */
    private readonly background;
    /**
     * A background scene.
     */
    private readonly backgroundScene;
    /**
     * Constructs a new clear pass.
     *
     * @param color - The color clear flag.
     * @param depth - The depth clear flag.
     * @param stencil - The stencil clear flag.
     */
    constructor(color?: boolean, depth?: boolean, stencil?: boolean);
    /**
     * Clears all buffer attachments with the respective clear values.
     *
     * @remarks `gl.clearBufferfv` expects 4 floats regardless of the target buffer format.
     * @see https://www.khronos.org/opengl/wiki/Framebuffer#Buffer_clearing
     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer
     * @param gl - A rendering context.
     * @param textureIndices - The indices of the texture attachments that should be cleared.
     */
    private clearBuffers;
    /**
     * Clears the default output buffer using the current clear values.
     *
     * @param clearColor - An override clear color.
     */
    private clear;
    /**
     * Clears the default output buffer using the scene background.
     */
    private clearWithBackground;
    protected onOutputChange(): void;
    compile(): Promise<void>;
    render(): void;
}
